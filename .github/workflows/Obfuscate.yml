name: Update and Obfuscate Worker

on:
  schedule:
    - cron: '0 19 * * *'  # 每天19:00 UTC（北京时间次日03:00）运行
  workflow_dispatch:  # 允许手动触发
  push:
    branches:
      - main  # 主分支更新时也运行

permissions:
  contents: write

jobs:
  update-and-obfuscate:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 设置超时时间

    steps:
      - name: Checkout 仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 令牌

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'  # 使用长期支持版本
          cache: 'npm'  # 缓存 npm 依赖

      - name: 安装依赖
        uses: nick-fields/retry@v2  # 添加重试机制
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            npm install -g javascript-obfuscator@4.0.0  # 锁定版本
            sudo apt-get update && sudo apt-get install -y jq curl unzip

      - name: 获取最新 release tag
        id: get_release
        run: |
          set -euo pipefail  # 启用严格模式
          
          # 获取最新 release 信息
          echo "正在获取最新版本信息..."
          API_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest"
          RESPONSE=$(curl -s -H "Accept: application/vnd.github.v3+json" "$API_URL")
          
          # 检查 API 响应
          if echo "$RESPONSE" | jq -e '.message' >/dev/null; then
            echo "API 错误: $(echo "$RESPONSE" | jq -r '.message')"
            exit 1
          fi
          
          latest_tag=$(echo "$RESPONSE" | jq -r '.tag_name')
          
          if [ "$latest_tag" = "null" ]; then
            echo "无法获取最新版本信息"
            exit 1
          fi
          
          echo "最新版本: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: 检查是否需要更新
        id: check_version
        run: |
          set -euo pipefail
          
          # 获取当前版本
          if [ -f "version.txt" ]; then
            current_version=$(cat version.txt | tr -d '\n' | tr -d '\r')
          else
            current_version=""
            echo "未找到版本文件，将创建新版本"
          fi
          
          echo "当前版本: $current_version"
          echo "最新版本: ${{ env.latest_tag }}"
          
          # 判断是否需要更新
          if [ "$current_version" != "${{ env.latest_tag }}" ]; then
            echo "需要更新"
            echo "should_update=true" >> $GITHUB_ENV
          else
            echo "无需更新"
            echo "should_update=false" >> $GITHUB_ENV
          fi

      - name: 下载并混淆代码
        if: env.should_update == 'true'
        run: |
          set -euo pipefail
          
          # 创建临时目录
          TEMP_DIR=$(mktemp -d)
          trap 'rm -rf "$TEMP_DIR"' EXIT  # 确保清理临时目录
          
          # 下载最新 worker.js
          echo "下载最新 worker.js 版本 ${{ env.latest_tag }}..."
          DOWNLOAD_URL="https://github.com/bia-pain-bache/BPB-Worker-Panel/releases/download/${{ env.latest_tag }}/worker.js"
          
          # 使用重试机制下载
          for i in {1..3}; do
            curl -L -o "$TEMP_DIR/origin.js" "$DOWNLOAD_URL" && break
            echo "下载尝试 $i 失败，5秒后重试..."
            sleep 5
          done
          
          # 验证下载文件
          if [ ! -f "$TEMP_DIR/origin.js" ]; then
            echo "错误: 下载文件失败"
            exit 1
          fi
          
          # 显示文件信息
          echo "下载成功:"
          ls -l "$TEMP_DIR/origin.js"
          
          # 混淆 JS 代码
          echo "开始混淆代码..."
          javascript-obfuscator "$TEMP_DIR/origin.js" --output "$TEMP_DIR/_worker.js" \
            --compact true \
            --identifier-names-generator hexadecimal \
            --string-array true \
            --string-array-threshold 0.75 \
            --string-array-encoding base64 \
            --transform-object-keys true \
            --split-strings true \
            --simplify true \
            --source-map false \
            --self-defending true
          
          # 验证混淆结果
          if [ ! -f "$TEMP_DIR/_worker.js" ]; then
            echo "错误: 混淆文件未生成"
            exit 1
          fi
          
          # 检查文件大小
          FILE_SIZE=$(stat -c %s "$TEMP_DIR/_worker.js")
          echo "混淆后文件大小: $FILE_SIZE 字节"
          
          # 添加版本信息
          echo "// Version: ${{ env.latest_tag }}" >> "$TEMP_DIR/_worker.js"
          echo "// Obfuscated on: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$TEMP_DIR/_worker.js"
          
          # 移动到最终位置
          mv "$TEMP_DIR/_worker.js" .
          echo "${{ env.latest_tag }}" > version.txt
          
          echo "更新完成"

      - name: 检查变更
        id: check_changes
        if: env.should_update == 'true'
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: 提交更改
        if: env.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔄 Update to BPB Panel v${{ env.latest_tag }}"
          commit_author: GitHub Actions <actions@github.com>
          branch: ${{ github.ref_name }}
          file_pattern: |
            _worker.js
            version.txt
          push_options: --force

      - name: 上传混淆文件作为工件
        if: success() && env.should_update == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: obfuscated-worker
          path: _worker.js
          retention-days: 7
